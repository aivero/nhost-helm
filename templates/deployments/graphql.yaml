{{- $fullname := include "nhost.fullname" . -}}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nhost.fullname" . }}-graphql
  labels:
    {{- include "nhost.labels" . | nindent 4 }}
    app.kubernetes.io/component: graphql
spec:
  {{- if not .Values.graphql.autoscaling.enabled }}
  replicas: {{ .Values.graphql.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "nhost.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: graphql
  template:
    metadata:
      annotations:
        checksum/config-env: {{ include (print $.Template.BasePath "/configmaps/env.yaml") . | sha256sum }}
        checksum/secrets-env: {{ include (print $.Template.BasePath "/secrets/env.yaml") . | sha256sum }}
        checksum/secrets-db: {{ include (print $.Template.BasePath "/secrets/database.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nhost.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: graphql
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nhost.serviceAccountName" . }}
      securityContext:
        fsGroup: 2000
      volumes:
        {{- if .Values.graphql.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "nhost.fullname" $ }}-graphql       
        {{- end }}
        
        {{- range $k, $v := .Values.graphql.migrations.configMaps }}
        - name: {{ $k | quote }}
          configMap:
            name: {{ include "common.tplvalues.render" (dict "value" (printf "%s-%s-migration" $fullname $v.name) "context" $) }}
        {{- end }}
        
        {{- if .Values.graphql.metadata.configMap }}
        - name: metadata
          configMap:
            name: {{ include "common.tplvalues.render" (dict "value" (printf "%s-%s-metadata" $fullname .Values.graphql.metadata.configMap.name ) "context" $) }}
        
        {{- end}}
      initContainers:
      - name: unpack-migration-metadata-tarballs-for-mounts
        image: alpine
        # todo: download migrations and metadata tarball from a cicd release of the matching branch (gitlab package registry)
        command:
          - sh
          - "-c"
          - |
            set -e
            apk add tree tar
            {{- if .Values.graphql.metadata.configMap }}
            tree -alh /metadata
            mkdir -p /data/metadata || true
            tar xvfj /metadata/metadata.tar.bz2 -C /data/metadata
            tree -alh /data/metadata
            {{- end }}
            mkdir -p /data/migrations || true
            {{- range $k, $v := .Values.graphql.migrations.configMaps }}
            tree -alh /migrations
            {{ printf "tar xvfj /migrations/%s/%s -C /data/migrations" $k (default "migrations.tar.bz2" $v.file) }}
            tree -alh /data/migrations
            {{- end }}

        volumeMounts:
          {{- range $k, $v := (((.Values).graphql).migrations).configMaps }}
          - name: {{ $k | quote }}
            mountPath: {{ printf "/migrations/%s/%s" $k (default "migrations.tar.bz2" $v.file) }}
            subPath: {{ default "migrations.tar.bz2" $v.file }}
          {{- end }}
          {{- if ((.Values.graphql).metadata).configMap }}
          - name: metadata
            mountPath: /metadata/{{ default "metadata.tar.bz2" .Values.graphql.metadata.configMap.file }}
            subPath: {{ default "metadata.tar.bz2" .Values.graphql.metadata.configMap.file }}
          {{- end }}
          - name: data
            mountPath: /data
      - name: wait-postgres
        image: postgres:14.4-alpine
        envFrom:
          - secretRef:
              name: {{ include "nhost.fullname" $ }}-database
        command:
          - 'sh'
          - '-c'
          - |
            # make sure pg is ready to accept connections, user/pw are not strictly required
            until pg_isready -d "$HASURA_GRAPHQL_DATABASE_URL"
            do
              echo "Waiting for postgres to be ready..."
              sleep 2;
            done
            # Now able to connect to postgres
            echo "Postgres is ready! Starting graphql server..."

      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
        image: "{{ .Values.graphql.image.repository }}:{{ .Values.graphql.image.tag }}"
        imagePullPolicy: {{ .Values.graphql.image.pullPolicy }}
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 10
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 2
          periodSeconds: 3
          failureThreshold: 5
        resources:
          {{- toYaml .Values.graphql.resources | nindent 12 }}
        env:
        - name: HASURA_GRAPHQL_LOG_LEVEL
          value: {{ .Values.graphql.logLevel }}
        - name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
          value: {{ .Values.graphql.unauthorizedRole }}
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          value: {{ .Values.graphql.enableConsole | quote }}
        - name: HASURA_GRAPHQL_ENABLE_TELEMETRY
          value: "false"
{{- if and .Values.graphql.persistence.enabled .Values.graphql.migrations.enabled }}
        - name: HASURA_GRAPHQL_MIGRATIONS_DIR
          value: "/data/migrations"
        - name: HASURA_GRAPHQL_METADATA_DIR
          value: "/data/metadata"
{{- end }}
        envFrom:
        - configMapRef:
            name: {{ include "nhost.fullname" $ }}-env
        - secretRef:
            name: {{ include "nhost.fullname" $ }}-env
        - secretRef:
            name: {{ include "nhost.fullname" $ }}-database
{{- if .Values.graphql.persistence.enabled }}
        volumeMounts:
        - mountPath: /data
          name: data
{{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
