{{- if eq .Values.global.ingress.className "nginx" }}
---
# Note that there is no nginx specific configuration here. Therefore, we do not need to explicitly care about nginx vs traefik.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "nhost.fullname" . }}-graphql-ingress
  labels:
    {{- include "nhost.labels" . | nindent 4 }}
    app.kubernetes.io/component: graphql
  {{- with .Values.global.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  ingressClassName: {{ .Values.global.ingress.className }}
  rules:
  - host: {{ default .Values.global.ingress.hostname .Values.graphql.hostnames.api }}
    http:
      paths:
      # todo: Consider explicitly not to trigger on /v1/functions as that one is for the functions ingress.
      - path: /v1/
        pathType: Prefix
        backend:
          service:
            name: {{ include "nhost.fullname" . }}-graphql
            port:
              name: http
      - path: /v1alpha1/
        pathType: Prefix
        backend:
          service:
            name: {{ include "nhost.fullname" . }}-graphql
            port:
              name: http
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: {{ include "nhost.fullname" . }}-graphql
            port:
              name: http
{{- if .Values.global.ingress.enableTls }}
  tls:
  - hosts:
      - {{ default .Values.global.ingress.hostname .Values.graphql.hostnames.api }}
    secretName: {{ include "nhost.fullname" . }}-api-tls
{{- end }}

{{- else if eq .Values.global.ingress.className "traefik" }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: {{ include "nhost.fullname" . }}-graphql-ingress-route
  labels:
    {{- include "nhost.labels" . | nindent 4 }}
    app.kubernetes.io/component: graphql
  {{- with .Values.global.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`{{ default .Values.global.ingress.hostname .Values.graphql.hostnames.api }}`) && PathPrefix(`/v1/`)
    kind: Rule
    services:
    - name: {{ include "nhost.fullname" . }}-graphql
      port: http
  - match: Host(`{{ default .Values.global.ingress.hostname .Values.graphql.hostnames.api }}`) && PathPrefix(`/v1alpha1/`)
    kind: Rule
    services:
    - name: {{ include "nhost.fullname" . }}-graphql
      port: http
  - match: Host(`{{ default .Values.global.ingress.hostname .Values.graphql.hostnames.api }}`) && PathPrefix(`/healthz`)
    kind: Rule
    services:
    - name: {{ include "nhost.fullname" . }}-graphql
      port: http
  - match: Host(`{{ default .Values.global.ingress.hostname .Values.graphql.hostnames.api }}`) && PathPrefix(`/v2/`)
    kind: Rule
    services:
    - name: {{ include "nhost.fullname" . }}-graphql
      port: http
  - match: Host(`{{ default .Values.global.ingress.hostname .Values.graphql.hostnames.api }}`) && PathPrefix(`/hasura/`)
    kind: Rule
    services:
    - name: {{ include "nhost.fullname" . }}-graphql
      port: http
    middlewares:
    - name: {{ include "nhost.fullname" . }}-hasura-stripprefix
  {{- if .Values.global.dashboard.password }}
    - name: {{ include "nhost.fullname" . }}-api-basic-auth
  {{- end }}

  {{- if .Values.global.ingress.enableTls }}
  tls:
    secretName: {{ include "nhost.fullname" . }}-api-tls
  {{- end }}

{{- if .Values.global.dashboard.password }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{ include "nhost.fullname" . }}-api-basic-auth
spec:
  basicAuth:
    secret: {{ include "nhost.fullname" $ }}-http
    realm: "Authentication Required - ok"
{{- end }}

---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{ include "nhost.fullname" . }}-hasura-stripprefix
spec:
  stripPrefix:
    prefixes:
      - "/hasura"

{{- end }}
